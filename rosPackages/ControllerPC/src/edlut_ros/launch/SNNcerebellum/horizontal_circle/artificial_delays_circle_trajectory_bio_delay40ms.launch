<!-- This .launch file serves to perform the Circular trajectory using the
torque driven cerebellar-like SNN controller implemented in EDLUT. -->

<launch>
  <machine name="main_PC" address="192.168.2.2"/>
  <machine name="monitor_PC" address="192.168.2.3" env-loader="/home/baxter/catkin_ws_cleaned_monitoring_WiFi/devel/env.sh" user="" password="" />


<!-- GLOBAL PARAMETERS
  -Use_sim_time:
    False-Run in real time.
    True-Run in simulation time.
  -Reference_time: Initialization time. It is set up in edlut simulator node (not used in this case)-->
<param name="use_sim_time" value="false" type="bool" />
<param name="reference_time" value="0.0" type="double" />
<param name="wireless_simulation" value="true" type="bool" />


<!-- SYNCHRONIZER NODE
When using simulation time it synchronizes all the other nodes so they all run at the sime time stamps.
If runnning in real time the synchronizer node will shutdown after the robot has been enabled.
  -Clock_topics: clock signals published by the other nodes for synchronization purposes
  -Checking_frequency: rate (Hz) at which the synchronizer checks if the other nodes have finished the current time step
  -Step_time: size (seconds) of every simulated time step -->
<node machine="main_PC" pkg="edlut_ros" name="synchronizer_node" type="synchronizer_node" output="screen">
  <rosparam param="clock_topics">
    [edlut_ros/clock/simulator, edlut_ros/clock/rbf_position, edlut_ros/clock/rbf_current_position, edlut_ros/clock/rbf_velocity,
     edlut_ros/clock/rbf_current_velocity, edlut_ros/clock/poisson, clock_gazebo, edlut_ros/clock/arm_state]
   </rosparam>
  <param name="checking_frequency" value="10000.0" type="double" />
  <param name="step_time" value="0.002" type="double" />
</node>


<!-- ROBOT ENABLER NODE
It enables the robot. Once done it publishes a message advertising
the robot is ready and then the node is shutdown. -->
<node machine="main_PC" pkg="edlut_ros" name="robot_enabler" type="robot_enabler_node.py" output="screen">
</node>

<!-- TRAJECTORY FROM FILE GENERATOR NODE
It generates a trajectory (position and velocity per joint) reading it from
a .txt file in the format:
  J0 J1 J2 J3 J4 ...
  J0 J1 J2 J3 J4 ...
  .
  .
  J0 J1 J2 J3 J4 ...
Each line contains the position/velocity for each joint. Each line corresponds to
a sample of the trajectory. One file for position, one file for velocity.
This node reads the files and publishes the trajectory on the desired position
and desired velocity topics. A trajectory is generated for every joint (joint_list param).
The node also generates a control signal and avertises it (control_topic) to notify when the different learning trials start.
Total number of trials and their length (seconds) is also specified.
  Q_INTERPOLATOR Version: two different circular trajectories are specified, one
  with radius R1 and another with radius R2. Via dynamic parameters, the radius
  of the generated trajectory can be modified online in the range [R1,R2]. -->
<node machine="main_PC" pkg="edlut_ros" name="q_interpolator_trajectory_generator" type="q_interpolator_trajectory_generator_node_compactDelay" output="screen" clear_params="true">
  # Define private parameters for the EDLUT simulation
  <param name="number_of_trials" value="1" type="int" />
  <param name="trial_length" value="10000" type="double" />
  <param name="joint_state_topic" value="robot/joint_states" type="str" />
  <param name="update_frequency" value="500.0" type="double" />
  <param name="samples" value="1000" type="int" />
  <param name="trajectory_frequency" value="0.5" type="double" />
  <param name="positions_file_name" value="/home/baxter/catkin_ws_WiFi/src/BaxterCerebellum/src/edlut_ros/trajectory_data_circle/horizontalCircle_1000samples_2seconds_r04_r12_position.txt" type="str" />
  <param name="velocities_file_name" value="/home/baxter/catkin_ws_WiFi/src/BaxterCerebellum/src/edlut_ros/trajectory_data_circle/horizontalCircle_1000samples_2seconds_r04_r12_velocity.txt" type="str" />
  <param name="min_radius" value="4.0" type="double" />
  <param name="max_radius" value="12.0" type="double" />
  <param name="radius" value="8.0" type="double" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <rosparam param="max_pos_amplitude">
    [1.7,1.04, 3.05, 2.61, 3.05, 2.09]
  </rosparam>
  <rosparam param="min_pos_amplitude">
    [-1.7, -2.14, -3.05, -0.05, -3.05, -1.57]
  </rosparam>
  <rosparam param="max_vel_amplitude">
    [2.0, 2.0, 2.0, 2.0, 4.0, 4.0]
  </rosparam>
  <rosparam param="min_vel_amplitude">
    [-2.0, -2.0, -2.0, -2.0, -4.0, -4.0]
  </rosparam>
  <param name="desired_position_topic" value="edlut_ros/desired_position/compact" type="str" />
  <param name="desired_velocity_topic" value="edlut_ros/desired_velocity/compact" type="str" />
  <param name="control_topic" value="edlut_ros/in_trial" type="str" />
  <param name="joint_command_topic" value="robot/limb/left/joint_command" type="str" />
</node>


<!-- WIRELESS ROBOT STATE NODE
This node avertises Baxter's left arm current state with a time stamp according to
the main_PC's clock. -->
<node machine="main_PC" pkg="edlut_ros" name="wireless_robot_state" type="wireless_robot_state" output="screen" clear_params="true">
  # Define private parameters for the baxter arm state wrapper
  <param name="input_topic" value="/robot/joint_states" type="str" />
  <param name="output_topic" value="/robot/joint_states_PCtimeStamp" type="str" />
  <param name="artificial_delay_topic" value="/edlut_ros/artificial_delay" type="str" />
  <param name="sampling_frequency" value="500.0" type="double" />
</node>


<!-- DELAY GENERATOR NODE
This generates a delay when the wireless scenario is a simulated one. -->
<node machine="main_PC" pkg="edlut_ros" name="delayGenerator" type="delayGenerator_fixed_node" output="screen" clear_params="true">
  # Define private parameters for the baxter arm state wrapper
  <param name="delay_topic" value="/edlut_ros/artificial_delay" type="str" />
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <param name="min_delay" value="0.00" type="double" />
  <param name="max_delay" value="0.04" type="double" />
  <param name="fixed_delay" value="0.00" type="double" />
</node>


<!-- BAXTER ARM STATE NODE DELAY SIMULATION
This node avertises Baxter's left arm current state.
Reads the data coming from Baxter's sensors and publishes the current position
and velocity for every joint in the specified topics. -->
<node machine="main_PC" pkg="edlut_ros" name="baxter_arm_state" type="baxter_arm_state_node_sync_compactDelay_interpolation" output="screen" clear_params="true">
  # Define private parameters for the baxter arm state wrapper
  <param name="input_topic" value="/robot/joint_states_PCtimeStamp" type="str" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1,left_w2]
  </rosparam>
  <param name="current_position_topic" value="edlut_ros/current_position/compact" type="str" />
  <param name="current_velocity_topic" value="edlut_ros/current_velocity/compact" type="str" />
  <param name="clock_topic" value="edlut_ros/clock/arm_state" type="str" />
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <param name="artificial_delay_topic" value="/edlut_ros/artificial_delay" type="str" />
  <param name="sensorial_delay_topic" value="/edlut_ros/sensorial_delay" type="str" />
</node>


<!-- RBF NODES
These nodes perform the conversion analogue-to-spike of the sensorial signals:
desired and current position, and desired and current velocity.
The state of each joint corresponds to a group of 40 neurons. Each group is then
subdivided into subgroups of 10 neurons each (i.e. 10 neurons per joint for
desired position, 10 neurons per joint for current position, 10 neurons per
joint for desired velocity, 10 neurons per joint for current velocity).
There are 4 nodes: 2 for position (one desired, one current)
                   2 for velocity (one desired, one current)
The range of neurons used for each joint, the range of the analogue sensorial
signal to be encoded and the maximum firing rate of the neurons are specified.
The delay parameter is used to mimic the afferent delay (50 ms).
CompactDelay version: the node takes into account the delay of each of the messages
received in order to translate the analogue info into spikes.
-->
<!-- RBF DESIRED POSITION encoding module -->
<node machine="main_PC" pkg="edlut_ros" name="rbf_node_desired_position" type="rbf_node_sync_compactDelay_EventDriven" output="screen" clear_params="true">
  # Define private parameters for the EDLUT simulation
  <param name="input_topic" value="edlut_ros/desired_position/compact" type="str" />
  <param name="output_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="control_topic" value="edlut_ros/in_trial" type="str" />
  <param name="clock_topic" value="edlut_ros/clock/rbf_position" type="str" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <rosparam param="min_neuron_index_list">
    [0,40,80,120,160,200]
  </rosparam>
  <rosparam param="max_neuron_index_list">
    [9, 49, 89, 129, 169, 209]
  </rosparam>
  <rosparam param="min_value_list">
     [-0.97, -0.48, 0.008, 0.58, -0.066, 0.24]
  </rosparam>
  <rosparam param="max_value_list">
    [-0.55, -0.03, 0.037, 1.80, 0.02, 1.02]
  </rosparam>
  <rosparam param="max_spike_frequency_list">
    [500.0,500.0,500.0,500.0,500.0,500.0]
  </rosparam>
  <rosparam param="overlapping_factor_list">
    [0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001]
  </rosparam>
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <param name="delay" value="0.04" type="double" />
</node>
<!-- RBF CURRENT POSITION encoding module -->
<node machine="main_PC" pkg="edlut_ros" name="rbf_node_current_position" type="rbf_node_sync_compactDelay_EventDriven" output="screen" clear_params="true">
  # Define private parameters for the EDLUT simulation
  <param name="input_topic" value="edlut_ros/current_position/compact" type="str" />
  <param name="output_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="control_topic" value="edlut_ros/in_trial" type="str" />
  <param name="clock_topic" value="edlut_ros/clock/rbf_current_position" type="str" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <rosparam param="min_neuron_index_list">
    [10, 50, 90, 130, 170, 210]
  </rosparam>
  <rosparam param="max_neuron_index_list">
    [19, 59, 99, 139, 179, 219]
  </rosparam>
  <rosparam param="min_value_list">
     [-0.97, -0.48, 0.008, 0.58, -0.066, 0.24]
  </rosparam>
  <rosparam param="max_value_list">
    [-0.55, -0.03, 0.037, 1.80, 0.02, 1.02]
  </rosparam>
  <rosparam param="max_spike_frequency_list">
    [500.0,500.0,500.0,500.0,500.0,500.0]
  </rosparam>
  <rosparam param="overlapping_factor_list">
    [0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001]
  </rosparam>
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <param name="delay" value="0.04" type="double" />
</node>
<!-- RBF DESIRED VELOCITY encoding module -->
<node machine="main_PC" pkg="edlut_ros" name="rbf_node_desired_velocity" type="rbf_node_sync_compactDelay_EventDriven" output="screen" clear_params="true">
  # Define private parameters for the EDLUT simulation
  <param name="input_topic" value="edlut_ros/desired_velocity/compact" type="str" />
  <param name="output_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="control_topic" value="edlut_ros/in_trial" type="str" />
  <param name="clock_topic" value="edlut_ros/clock/rbf_velocity" type="str" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <rosparam param="min_neuron_index_list">
    [20, 60, 100, 140, 180, 220]
  </rosparam>
  <rosparam param="max_neuron_index_list">
    [29, 69, 109, 149, 189, 229]
  </rosparam>
  <rosparam param="min_value_list">
    [-0.79, -0.75, -0.055, -1.8, -0.225, -1.1]
  </rosparam>
  <rosparam param="max_value_list">
    [0.53, 0.75, 0.08, 1.81, 0.097, 1.1]
  </rosparam>
  <rosparam param="max_spike_frequency_list">
    [500.0,500.0,500.0,500.0,500.0,500.0]
  </rosparam>
  <rosparam param="overlapping_factor_list">
    [0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001]
  </rosparam>
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <param name="delay" value="0.04" type="double" />
</node>
<!-- RBF CURRENT VELOCITY encoding module -->
<node machine="main_PC" pkg="edlut_ros" name="rbf_node_current_velocity" type="rbf_node_sync_compactDelay_EventDriven" output="screen" clear_params="true">
  # Define private parameters for the EDLUT simulation
  <param name="input_topic" value="edlut_ros/current_velocity/compact" type="str" />
  <param name="output_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="control_topic" value="edlut_ros/in_trial" type="str" />
  <param name="clock_topic" value="edlut_ros/clock/rbf_current_velocity" type="str" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <rosparam param="min_neuron_index_list">
    [30, 70, 110, 150, 190, 230]
  </rosparam>
  <rosparam param="max_neuron_index_list">
    [39, 79, 119, 159, 199, 239]
  </rosparam>
  <rosparam param="min_value_list">
    [-0.87, -0.85, -0.06, -1.9, -0.25, -1.25]
  </rosparam>
  <rosparam param="max_value_list">
    [0.61, 0.85, 0.13, 1.9, 0.12, 1.25]
  </rosparam>
  <rosparam param="max_spike_frequency_list">
    [500.0,500.0,500.0,500.0,500.0,500.0]
  </rosparam>
  <rosparam param="overlapping_factor_list">
    [0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001, 0.500000000001]
  </rosparam>
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <param name="delay" value="0.04" type="double" />
</node>


<!-- FULL STATE NODE
This node generates a combined signal of the Robot's current state and the desired state.
To do so it ensembles the current state (position and velocity) of the Robot with
the corresponding desired state taking into account the sensorial delay and the delay
associated to each of the Robot Current State messages received.
That is: a current state message at time t with a delay t_d corresponds to
the desired state message generated at t - sensorial_delay - t_d. -->
<node machine="main_PC" pkg="edlut_ros" name="full_state_node" type="full_state_node" output="screen" clear_params="true">
  <param name="desired_position_topic" value="edlut_ros/desired_position/compact" type="str" />
  <param name="desired_velocity_topic" value="edlut_ros/desired_velocity/compact" type="str" />
  <param name="current_position_topic" value="edlut_ros/current_position/compact" type="str" />
  <param name="current_velocity_topic" value="edlut_ros/current_velocity/compact" type="str" />
  <param name="output_topic" value="edlut_ros/full_state/compact" type="str" />
  <param name="sampling_frequency" value="500.0" type="double" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <param name="sensorial_delay" value="0.04" type="double" />
</node>


<!-- ERROR ESTIMATION NODE
This node generates the error signal comparing the desired vs current position
and velocity. The gain of each signal (position and velocity) to the total error
can be specified. The error can be calculated for the joints specified in
joint_list param. -->
<node machine="main_PC" pkg="edlut_ros" name="error_node" type="error_estimator_node_full_state_compactDelay" output="screen" clear_params="true">
  <param name="full_state_topic" value="edlut_ros/full_state/compact" type="str" />
  <param name="output_topic" value="edlut_ros/error_estimation/compact" type="str" />
  <param name="sampling_frequency" value="500.0" type="double" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <rosparam param="error_position_gain">
    <!-- [1.5, 2.0, 3.0, 2.0, 3.0, 3.0] -->
    [1.5, 2.0, 3.0, 2.0, 2.0, 1.5]
  </rosparam>
  <rosparam param="error_velocity_gain">
    <!-- [1.5, 1.0, 3.0, 1.0, 3.0, 0.5] -->
    [1.5, 1.0, 3.0, 1.0, 2.0, 1.5]
  </rosparam>
</node>


<!-- POISSON GENERATOR NODE
This node makes the analogue-to-spike conversion of the error signal.
The min_values and max_values specify the minimun and maximum error values
corresponding to the minimum and maximum spiking frequency rates. Below the
min_value the spiking frequency will be the min_spike_frequency, above the
max_value the spiking frequency will be the max_spike_frequency.
CompactDelay version: the node takes into account the delay of each of the messages
received in order to translate the analogue info into spikes.
-->
<node machine="main_PC" pkg="edlut_ros" name="pg_error_node" type="poisson_generator_node_delay_compactDelay_EventDriven" output="screen">
  <param name="input_topic" value="edlut_ros/error_estimation/compact" type="str" />
  <param name="output_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="control_topic" value="edlut_ros/in_trial" type="str" />
  <param name="clock_topic" value="edlut_ros/clock/poisson" type="str" />
  <rosparam param="joint_list">
    [left_s0, left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <rosparam param="min_neuron_index_list_pos">
    [240, 340, 440, 540, 640, 740]
  </rosparam>
  <rosparam param="max_neuron_index_list_pos">
    [289, 389, 489, 589, 689, 789]
  </rosparam>
  <rosparam param="min_neuron_index_list_neg">
    [290, 390, 490, 590, 690, 790]
  </rosparam>
  <rosparam param="max_neuron_index_list_neg">
    [339, 439, 539, 639, 739, 839]
  </rosparam>
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <rosparam param="min_value_list">
    [0.001, 0.001, 0.001, 0.001, 0.001, 0.001]
  </rosparam>
  <rosparam param="max_value_list">
    [0.01, 0.01, 0.01, 0.01, 0.01, 0.01]
    <!-- Agressive IO -->
    <!-- [0.005, 0.005, 0.005, 0.005, 0.005, 0.005] -->
  </rosparam>
  <rosparam param="max_spike_frequency_list">
    [10.0, 10.0, 10.0, 10.0, 10.0, 10.0]
  </rosparam>
  <rosparam param="min_spike_frequency_list">
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
  </rosparam>
  <rosparam param="overlapping_factor_list">
    [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
  </rosparam>
  <param name="seed" value="1234" type="int" />
  <param name="delay" value="0.04" type="double" />
</node>


<!-- EDLUT SIMULATOR NODE
Launches EDLUT simulator with the specified network and weight files.
Publishes EDLUT generated spikes to output_topic.
Also provides with EDLUT parameter configuration
-->
<node machine="main_PC" pkg="edlut_ros" name="edlut_simulator_node" type="simulator_node2" output="screen">
  # Define private parameters for the EDLUT simulation
  <!-- EDLUT NETWORK FIlE: -->
    <param name="network_file" value="/home/baxter/catkin_ws_WiFi/src/BaxterCerebellum/src/edlut_ros/trajectory_data_circle/Network_6_joints_10MF_per_RBF_4MF_per_GrC_CIRCLE_NEW_LEARNING_RULE_bio_delay40ms.cfg" type="str" />
  <!-- LEARNING FROM SCRATCH WEIGHTS FILE: -->
    <!-- <param name="weight_file" value="/home/baxter/catkin_ws_WiFi/src/BaxterCerebellum/src/edlut_ros/trajectory_data_circle/Weights_6_joints_10MF_per_RBF_4MF_per_GrC_CIRCLE_delays.cfg" type="str" /> -->
  <!-- ALREADY LEARNT TRAJECTORY WEIGHTS FILE: -->
    <!-- Real Robot -->
    <param name="weight_file" value="/home/baxter/catkin_ws_WiFi/src/BaxterCerebellum/src/edlut_ros/trajectory_data_circle/output_weight_bio_delay40ms.dat" type="str" />
    <!-- Gazebo -->
    <!-- <param name="weight_file" value="/home/baxter/catkin_ws_WiFi/src/BaxterCerebellum/src/edlut_ros/trajectory_data_circle/output_weight_Gazebo.dat" type="str" /> -->
  <param name="input_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="output_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="clock_topic" value="edlut_ros/clock/simulator" type="str" />
  <param name="Rt1_gap" value="0.70" type="double" />
  <param name="Rt2_gap" value="0.90" type="double" />
  <param name="Rt3_gap" value="0.95" type="double" />
  <param name="number_threads" value="4" type="int" />
  <param name="step_time" value="0.002" type="double" />
  <param name="max_spike_buffered" value="100000000" type="int" />
  <param name="sensorial_delay" value="0.04" type="double" />
  <param name="sensorial_delay_margin" value="0.9" type="double" />
  <param name="checking_frequency" value="1000.0" type="double" />
  <param name="motor_delay" value="0.04" type="double" />
  <param name="save_weight_period" value="0.0" type="double" />
  <param name="rt_statistics_period" value="10.0" type="double" />
  <param name="input_delay_topic" value="edlut_ros/current_position/compact" type="str" />
</node>


<!-- SPIKE DECODER NODE COMPACT FUTURE
This node makes the Spike-to-analogue conversion of the cerebellar output
activity. The DCN layer neural activity is translated into torque commands.
The delta_spike (pos and neg stand for positive and negative torque values)
parameters provide a specific conversion factor for each joint, accounting for
their mass and relative position.
In case of a simulated wireless scenario this node adds a delay to the generated
torque commands.
-->
<node machine="main_PC" pkg="edlut_ros" name="spike_decoder_node_future_torque" type="spike_decoder_node_compact_future_torque" output="screen">
  <param name="input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="output_topic" value="edlut_ros/motor_command/torque_cerebellum" type="str" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1,left_w2]
  </rosparam>
  <rosparam param="min_neuron_index_list_pos">
    [61440, 61540, 61640, 61740, 61840, 61940, -1]
  </rosparam>
  <rosparam param="max_neuron_index_list_pos">
    [61489, 61589, 61689, 61789, 61889, 61989, -1]
  </rosparam>
  <rosparam param="min_neuron_index_list_neg">
    [61490, 61590, 61690, 61790, 61890, 61990, -1]
  </rosparam>
  <rosparam param="max_neuron_index_list_neg">
    [61539, 61639, 61739, 61839, 61939, 62039, -1]
  </rosparam>
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="tau_time_constant" value="0.0" type="double" />
  <rosparam param="delta_spike_list_pos">
    <!-- [0.85, 1.35, 0.375, 0.88, 0.088, 0.085, 0] -->
    <!-- [0.75, 1.0, 0.375, 0.6, 0.05, 0.05, 0] -->
    <!-- [0.77, 1.25, 0.375, 0.78, 0.082, 0.078, 0] -->
    <!-- [0.8, 1.28, 0.4, 0.8, 0.088, 0.082, 0] -->
    [0.75, 1.1, 0.375, 0.63, 0.078, 0.078, 0]
  </rosparam>
  <rosparam param="delta_spike_list_neg">
    <!-- [0.85, 1.35, 0.375, 0.88, 0.088, 0.085, 0] -->
    <!-- [0.75, 1.0, 0.375, 0.5, 0.05, 0.05, 0] -->
    <!-- [0.77, 1.25, 0.375, 0.78, 0.082, 0.078, 0] -->
    <!-- [0.8, 1.28, 0.4, 0.8, 0.088, 0.082, 0] -->
    [0.75, 1.1, 0.375, 0.63, 0.078, 0.078, 0]
  </rosparam>
  <param name="delay_topic" value="/edlut_ros/artificial_delay" type="str" />
</node>


<!-- TORQUE PD SUPERVISOR
This nodes supervises that the joints are kept within a specified working area
(min_position - max_position values). If a joint is outside of that working are,
a PD controller acts to bring it back to the working area. The Kp a Kd factors
of the controller are specified for each joint.
-->
<node machine="main_PC" pkg="edlut_ros" name="raspberry_torque_pd_supervisor" type="raspberry_pd_supervisor_node" output="screen">
  <param name="robot_state_topic" value="robot/joint_states" type="str" />
  <param name="output_topic" value="edlut_ros/motor_command/torque_pd_supervisor" type="str" />
  <param name="update_frequency" value="500.0" type="double" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1,left_w2]
  </rosparam>
  <rosparam param="kp">
    [20.0,20.0,20.0,20.0,3.0,3.0,3.0]
  </rosparam>
  <rosparam param="kd">
    [5.0,5.0,5.0,5.0,1.0,1.0,1.0]
  </rosparam>
  <rosparam param="min_position_list">
    [-0.97, -0.48, 0.008, 0.58, -0.066, 0.24, 0.0]
  </rosparam>
  <rosparam param="max_position_list">
    [-0.55, -0.03, 0.037, 1.80, 0.02, 1.02, 0.0]
  </rosparam>
</node>



<!-- FINAL TORQUE NODE (to be executed on Baxter onboard PC)
This node adds the cerebellar torque and the PD_supervisor torque.
Two buffers are used for the cerebellar torque, one for future torque commands and another
for past commands. The output torque is computed as the mean of the future commands and the
same number of past commands. Also a security backup copy is used to store the mean torque of
the last given iterations. In case of loss of communication with the cerebellum, the backup
copy is used as the cerebellar torque comnmands.
The size of the filter is equal to (n*2 + 1)
  n = past_cerebellar_torque_buffer_size
  2*n => past_samples, future_samples
  +1 => present sample
In order for the mean filter to be implemented a minimum of min_future_samples is required:
  minimum filter size = 2*min_future_samples + 1
When the amount of future samples is less than the minimum required the computed torque equals
the last commanded torque reduced by torque_reduction_factor.
-->
<node machine="main_PC" pkg="edlut_ros" name="torque_addition" type="torque_final_node_delay" output="screen">
  <param name="output_topic" value="robot/limb/left/joint_command" type="str" />
  <param name="cerebellar_torque_topic" value="edlut_ros/motor_command/torque_cerebellum" type="str" />
  <param name="pd_supervisor_torque_topic" value="edlut_ros/motor_command/torque_pd_supervisor" type="str" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1,left_w2]
  </rosparam>
  <param name="past_cerebellar_torque_buffer_size" value="10" type="int" />
  <param name="min_future_samples" value="2" type="int" />
  <param name="sampling_frequency" value="500.0" type="double" />
  <param name="disable_gravity_compensation" value="true" type="bool" />
  <param name="gravity_topic" value="robot/limb/left/suppress_gravity_compensation" type="str" />
  <param name="T_iteration" value="2.0" type="double" />
  <param name="n_iterations_backup" value="4" type="int" />
  <param name="iteration_samples" value="1000" type="int" />
  <param name="motor_delay_topic" value="edlut_ros/motor_delay" type="str" />
  <param name="iteration_filter_size_topic" value="iteration_torque_filter_size" type="str" />
  <param name="future_buffer_samples_topic" value="future_torque_buffer_size" type="str" />
  <param name="torque_reduction_factor" value="0.998" type="double" />
</node>


<!--ENDPOINT PUBLISHER
This node publishes the position of the end-effector for monitoring purposes. -->
<node machine="monitor_PC" name="endpoint_publisher" pkg="edlut_ros" type="xyz_publisher.py" output="screen">
  <param name="limb" value="left" type="str" />
  <param name="rate" value="500.0" type="double" />
  <param name="output_topic" value="/edlut_ros/endpoint_position/compact" type="str" />
</node>


<!-- TORQUE REMAPING
This node remaps the torque commands published in robot/limb/left/joint_command to a new topic including the time stamp
of the message. It is used to record data for the Inverse Model. (Otherwise the recorded torque commands have no time stamp
to cross references with other data) -->
<node machine="main_PC" pkg="edlut_ros" name="torque_remaping" type="torque_command_remaping" output="screen" clear_params="true">
  # Define private parameters for the baxter arm state wrapper
  <param name="input_topic" value="robot/limb/left/joint_command" type="str" />
  <param name="output_topic" value="torque_command_for_inverse_model" type="str" />
</node>


<!-- ############################  PLOT NODES  ############################ -->
<!-- To display the graphs, run the rqt_reconfigure plugin and select them
from the menu.
 >> rosrun rqt_reconfigure rqt_reconfigure
-->

<!-- RASTER PLOT
The following nodes plot the spike activity of each cerebellar layer:
Mossy Fibers, Inferior Olive, Granular Cells, Purkinje Cells and DCN.
To do so, the neuron range for each layer is specified.-->
<!-- MOSSY FIBERS -->
<node machine="monitor_PC" pkg="edlut_ros" name="MF" type="RasterPlot.py" output="screen">
  <param name="input_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="figure_name" value="MF" type="str" />
  <param name="min_neuron_index" value="1" type="int" />
  <param name="max_neuron_index" value="239" type="int" />
  <param name="refresh_rate" value="1.0" type="double" />
</node>


<!-- INFERIOR OLIVE -->
<node machine="monitor_PC" pkg="edlut_ros" name="IO" type="RasterPlot.py" output="screen">
  <param name="input_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="figure_name" value="IO" type="str" />
  <param name="min_neuron_index" value="240" type="int" />
  <param name="max_neuron_index" value="839" type="int" />
  <param name="refresh_rate" value="1.0" type="double" />
</node>


<!-- GRANULAR CELLS -->
<node machine="monitor_PC" pkg="edlut_ros" name="GrC" type="RasterPlot.py" output="screen">
  <param name="input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="figure_name" value="GrC" type="str" />
  <param name="min_neuron_index" value="840" type="int" />
  <param name="max_neuron_index" value="60839" type="int" />
  <param name="refresh_rate" value="1.0" type="double" />
</node>


<!-- PURKINJE CELLS -->
<node machine="monitor_PC" pkg="edlut_ros" name="PC" type="RasterPlot.py" output="screen">
  <param name="input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="figure_name" value="PC" type="str" />
  <param name="min_neuron_index" value="60840" type="int" />
  <param name="max_neuron_index" value="61439" type="int" />
  <param name="refresh_rate" value="0.5" type="double" />
</node>


<!-- DCN CELLS -->
<node machine="monitor_PC" pkg="edlut_ros" name="DCN" type="RasterPlot.py" output="screen">
  <param name="input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="figure_name" value="DCN" type="str" />
  <param name="min_neuron_index" value="61440" type="int" />
  <param name="max_neuron_index" value="62039" type="int" />
  <param name="refresh_rate" value="0.5" type="double" />
</node>


<!-- RASTER PLOT 2 entries
The following nodes plot the activity of 2 different layers together. -->
<!-- DCN CELLS & IO CELLS -->
<node machine="monitor_PC" pkg="edlut_ros" name="DCN_IO" type="RasterPlot_2Entries.py" output="screen">
  <param name="first_input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="second_input_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="figure_name" value="DCN and IO" type="str" />
  <param name="first_min_neuron_index" value="61440" type="int" />
  <param name="first_max_neuron_index" value="62039" type="int" />
  <param name="second_min_neuron_index" value="240" type="int" />
  <param name="second_max_neuron_index" value="839" type="int" />
  <param name="refresh_rate" value="0.5" type="double" />
</node>


<!-- DCN CELLS & PC CELLS -->
<node machine="monitor_PC" pkg="edlut_ros" name="DCN_PC" type="RasterPlot_2Entries.py" output="screen">
  <param name="first_input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="second_input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="figure_name" value="DCN and PC" type="str" />
  <param name="first_min_neuron_index" value="61440" type="int" />
  <param name="first_max_neuron_index" value="62039" type="int" />
  <param name="second_min_neuron_index" value="60840" type="int" />
  <param name="second_max_neuron_index" value="61439" type="int" />
  <param name="refresh_rate" value="0.5" type="double" />
</node>


<!-- MF CELLS & GrC CELLS -->
<node machine="monitor_PC" pkg="edlut_ros" name="MF_GrC" type="RasterPlot_2Entries.py" output="screen">
  <param name="first_input_topic" value="edlut_ros/simulation/input_spike" type="str" />
  <param name="second_input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="figure_name" value="MF and GrC" type="str" />
  <param name="first_min_neuron_index" value="1" type="int" />
  <param name="first_max_neuron_index" value="240" type="int" />
  <param name="second_min_neuron_index" value="840" type="int" />
  <param name="second_max_neuron_index" value="60839" type="int" />
  <param name="refresh_rate" value="0.5" type="double" />
</node>


<!-- RASTER PLOT AND ANALOGUE SIGNAL
The following node plots the spiking activity of the DCN layer and its corresponding
translation into torque commands -->
<!-- DCN CELLS & TORQUE -->
<node machine="monitor_PC" pkg="edlut_ros" name="DCN_and_TORQUE" type="RasterPlot_and_AnalogSignal.py" output="screen">
  <param name="spike_input_topic" value="edlut_ros/simulation/output_spike" type="str" />
  <param name="analog_input_topic" value="edlut_ros/motor_command/torque_cerebellum" type="str" />
  <param name="figure_name" value="DCN and TORQUE" type="str" />
  <param name="min_neuron_index" value="61440" type="int" />
  <param name="max_neuron_index" value="62039" type="int" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <param name="refresh_rate" value="0.5" type="double" />
</node>


<!-- POSITION MAE
This node creates an animated graph of the position Mean Absolute Error (MAE)
per trial (trial duration specified). The MAE represented is the mean of the
specified joints. If only one joint is specified, that joint's MAE is plotted. -->
<node machine="monitor_PC" pkg="edlut_ros" name="PMAE" type="MAE_position.py" output="screen">
  <param name="full_state_topic" value="edlut_ros/full_state/compact" type="str" />
  <param name="duration_trial" value="2" type="double" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <param name="figure_name" value="Position MAE" type="str" />
  <param name="refresh_rate" value="1.0" type="double" />
</node>


<!-- VELOCITY MAE
This node creates an animated graph of the velocity Mean Absolute Error (MAE)
per trial (trial duration specified). -->
<node machine="monitor_PC" pkg="edlut_ros" name="VMAE" type="MAE_velocity.py" output="screen">
  <param name="full_state_topic" value="edlut_ros/full_state/compact" type="str" />
  <param name="duration_trial" value="2" type="double" />
  <rosparam param="joint_list">
    [left_s0,left_s1,left_e0,left_e1,left_w0,left_w1]
  </rosparam>
  <param name="figure_name" value="Velocity MAE" type="str" />
  <param name="refresh_rate" value="1.0" type="double" />
</node>


<!-- CARTESIAN SPACE TRAJECTORY PLOT
This node creates an 3D animation of the trajectory being performed by the
end-effector in Cartesian space. -->
<node machine="monitor_PC" pkg="edlut_ros" name="trajectory_plot" type="TrajectoryPlot2.py" output="screen">
  <param name="limb" value="left" type="str" />
  <param name="refresh_frame" value="50" type="double" />
  <param name="trajectory_period" value="2.0" type="double" />
  <param name="trajectory_file" value="/home/baxter/catkin_ws_cleaned_monitoring/src/BaxterCerebellum/src/edlut_ros/trajectory_data_circle/horizontalCircle_1000samples_2seconds_r04_r12_xyz.txt" type="str" />
</node>



<!-- PLOT TOPICS
This node plots the specified topics in RT using the rqt_plot plugin -->
 <node machine="monitor_PC" pkg="rqt_plot" name="plot_topics_state" type="rqt_plot"
      args="edlut_ros/full_state/compact/desired_position[0]
      edlut_ros/full_state/compact/desired_position[1]
      edlut_ros/full_state/compact/desired_position[2]
      edlut_ros/full_state/compact/desired_position[3]
      edlut_ros/full_state/compact/desired_position[4]
      edlut_ros/full_state/compact/desired_position[5]
      edlut_ros/full_state/compact/current_position[0]
      edlut_ros/full_state/compact/current_position[1]
      edlut_ros/full_state/compact/current_position[2]
      edlut_ros/full_state/compact/current_position[3]
      edlut_ros/full_state/compact/current_position[4]
      edlut_ros/full_state/compact/current_position[5]
      "/>



<!-- FOR INVERSE MODEL
RECORD TOPICS TO ROSBAG FILE
This node saves the messages of the specified topics in a .rosbag file.
When active, this node is used to save the data of the running experimental
setup.
 <node pkg="rosbag" type="record" name="rosbag_record"
       args="record -o $(find edlut_ros)/rosbags/circle_InverseModel
       /robot/limb/left/gravity_compensation_torques
       /robot/limb/left/joint_command
       /edlut_ros/endpoint_position/compact
       /edlut_ros/current_position/compact
       /edlut_ros/current_velocity/compact
       /torque_command_for_inverse_model"
       />
-->


<!-- RECORD TOPICS TO ROSBAG FILE -->
 <node pkg="rosbag" type="record" name="rosbag_record"
       args="record -o $(find edlut_ros)/rosbags/KernelVariations/MAE_per_delay_cerebellum_circle_bio_delay40ms
       /edlut_ros/artificial_delay
       /edlut_ros/full_state/compact
       /edlut_ros/motor_command/torque_pd_supervisor
       /edlut_ros/motor_command/torque_cerebellum
       /edlut_ros/endpoint_position/compact
       /torque_command_for_inverse_model
       /edlut_ros/error_estimation/compact
       /edlut_ros/simulation/input_spike
       /edlut_ros/simulation/output_spike
       /edlut_ros/desired_position/compact
       /edlut_ros/desired_velocity/compact
       /torque_final/control_topic/data
       /future_torque_buffer_size
       /edlut_ros/sensorial_delay
       /edlut_ros/motor_delay
       /torque_final/control_topic
       /future_torque_buffer_size
       /robot/joint_states_PCtimeStamp
       /edlut_ros/current_position/compact
       /edlut_ros/current_velocity/compact
       /robot/joint_states
       /robot/limb/left/joint_command
       /robot/limb/left/gravity_compensation_torques"
       />


<!-- Plot the delays:
artificial delay, and actual sensorial and motor delays -->
<node machine="monitor_PC" pkg="rqt_plot" name="plot_delays" type="rqt_plot"
    args="edlut_ros/sensorial_delay
    edlut_ros/motor_delay
    edlut_ros/artificial_delay"/>


<!-- Delay STATISTICS -->
<node machine="main_PC" pkg="edlut_ros" name="delay_stats" type="sensorimotor_delay_statistics.py" output="screen">
  <param name="sensorial_delay_topic" value="edlut_ros/sensorial_delay" type="str" />
  <param name="motor_delay_topic" value="edlut_ros/motor_delay" type="str" />
</node>


<!-- Publish the amount of samples used in the mean filter ("control topic")
and the amount of future torque samples available ("future torque buffer size") -->
<node machine="monitor_PC" pkg="rqt_plot" name="plot_topics_torque" type="rqt_plot"
      args="iteration_torque_filter_size
      future_torque_buffer_size"/>


<!-- -->
<node machine="monitor_PC" pkg="rqt_plot" name="plot_torquePD" type="rqt_plot"
      args="torque_command_for_inverse_model/data[0]
      torque_command_for_inverse_model/data[1]
      edlut_ros/motor_command/torque_pd_supervisor/data[0]
      edlut_ros/motor_command/torque_pd_supervisor/data[1]
      edlut_ros/motor_command/torque_cerebellum/data[0]
      edlut_ros/motor_command/torque_cerebellum/data[1]
      "/>


</launch>
